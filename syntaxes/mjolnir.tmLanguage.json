{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Mjolnir",
    "comment": "Mjolnir language syntax",
    "scopeName": "source.mj",
    "fileTypes": [
        "mj"
    ],
    "patterns": [
        {
            "include": "#all"
        }
    ],
    "repository": {
        "all": {
            "patterns": [
                {
                    "include": "#comment-paragraph"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#module"
                },
                {
                    "include": "#import"
                },
                {
                    "include": "#annotation"
                },
                {
                    "include": "#shell-variable"
                },
                {
                    "include": "#shell-substitution"
                },
                {
                    "include": "#shell"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#braces"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#type-qualifier"
                },
                {
                    "include": "#keyword"
                },
                {
                    "include": "#unit"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#type"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#constant"
                },
                {
                    "include": "#function"
                },
                {
                    "include": "#variable"
                }
            ]
        },
        "annotation": {
            "begin": "@",
            "end": "(?=`)|$",
            "name": "punctuation.quoted.mj",
            "patterns": [
                {
                    "match": "\\(.*\\)",
                    "name": "punctuation.section.mj"
                }
            ]
        },
        "braces": {
            "patterns": [
                {
                    "begin": "{",
                    "end": "(?=`)|}|$",
                    "name": "punctuation.section.mj",
                    "patterns": [
                        {
                            "include": "#all"
                        }
                    ]
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "begin": "^ */// ```",
                    "end": "^ *(?:/// ```|(?!///))",
                    "name": "comment.block.documentation.mj",
                    "patterns": [
                        {
                            "begin": "(?<=^ */// )",
                            "end": "$",
                            "name": "comment.block.documentation.mj",
                            "patterns": [
                                {
                                    "include": "#all"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "^ *///",
                    "end": "$",
                    "name": "comment.block.documentation.mj",
                    "patterns": [
                        {
                            "include": "#comment-inline-code"
                        },
                        {
                            "include": "#comment-tag"
                        },
                        {
                            "include": "#comment-heading"
                        }
                    ]
                },
                {
                    "begin": "//",
                    "end": "$",
                    "name": "comment.line.double-slash.mj",
                    "patterns": [
                        {
                            "include": "#comment-inline-code"
                        },
                        {
                            "include": "#comment-tag"
                        }
                    ]
                }
            ]
        },
        "comment-inline-code": {
            "begin": "`",
            "end": "`|$",
            "name": "comment.block.documentation.mj",
            "patterns": [
                {
                    "include": "#all"
                }
            ]
        },
        "comment-heading": {
            "match": "(?<=/// #+) .*$",
            "name": "punctuation.quoted.mj"
        },
        "comment-tag": {
            "match": "(?<=// )(?:BUG|DEPRECATED|FIXME|HACK|NOTE|OPTIMIZE|REVIEW|TODO):(?= )",
            "name": "punctuation.quoted.mj"
        },
        "comment-paragraph": {
            "begin": "^ */// *$",
            "while": "^ */// *(?=\\S)",
            "name": "comment.block.documentation.mj",
            "patterns": [
                {
                    "include": "#comment-inline-code"
                },
                {
                    "include": "#comment-list"
                },
                {
                    "include": "#comment-tag"
                },
                {
                    "include": "#comment-heading"
                }
            ]
        },
        "comment-list": {
            "begin": "^ */// *(?=-|\\w+[.)])",
            "while": "^ */// *(?=\\S)",
            "name": "comment.block.documentation.mj",
            "patterns": [
                {
                    "begin": "(?<=^ */// +)(-|\\w+[.)]) ",
                    "end": "$",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.quoted.mj"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comment-inline-code"
                        }
                    ]
                }
            ]
        },
        "constant": {
            "match": "\\b(?:false|null|true|uninitialized|[0-9_]*[A-Z][A-Z0-9_]*)\\b",
            "name": "constant.language.mj"
        },
        "function": {
            "match": "\\b[0-9_]*[a-z][a-z0-9_]*(?=[(<&])",
            "name": "keyword.operator.mj"
        },
        "import": {
            "begin": "^\\s*(import)\\s+(?=[A-Za-z0-9])",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.mj"
                }
            },
            "patterns": [
                {
                    "match": "\\b[A-Za-z0-9][A-Za-z0-9.+-]*",
                    "name": "entity.name.type.mj"
                },
                {
                    "match": "::",
                    "name": "punctuation.separator.mj"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "begin": "\\bfor(?=\\s+(?!(?:and|else|or|then)(?:\\b|[<(&])|[ai]s(?=\\s+[A-Za-z0-9]))[~*&+-]*[\\[({A-Za-z0-9_\"'])",
                    "end": "\\b(?:in(?!\\s+in)\\b|(?<=in\\s+)in(?=\\s+in))\\b|$",
                    "name": "keyword.control.mj",
                    "patterns": [
                        {
                            "include": "#all"
                        }
                    ]
                },
                {
                    "match": "\\b(?:bitfield|enum|impl|struct|type|union|where)(?=<)",
                    "name": "keyword.control.mj"
                },
                {
                    "match": "\\b(?:asm|do|embed|enum|struct|try|union)(?=\\s+(?!(?:and|else|or|then)(?:\\b|[<(&])|[ai]s(?=\\s+[A-Za-z0-9]))[~*&+-]*[\\[({A-Za-z0-9_\"'])",
                    "name": "keyword.control.mj"
                },
                {
                    "match": "\\b(?:case|catch|class|if|interface|match|type|until|use|when|while)(?=\\s+(?!(?:and|else|or|then)(?:\\b|[<(&])|[ai]s(?=\\s+[A-Za-z0-9]))[~*&+-]*[\\[(A-Za-z0-9_\"'])",
                    "name": "keyword.control.mj"
                },
                {
                    "match": "\\b[ai]s(?=\\s+[A-Za-z0-9])",
                    "name": "keyword.control.mj"
                },
                {
                    "match": "\\b(and|break|continue|else|fail|not|or|return|then|yield)\\b(?![(<&])",
                    "name": "keyword.control.mj"
                }
            ]
        },
        "module": {
            "match": "\\b[A-Za-z0-9][A-Za-z0-9+-]*(?=::)",
            "name": "entity.name.type.mj"
        },
        "number": {
            "patterns": [
                {
                    "match": "(?:\\b|[+-]?)\\d+(?:,\\d+)*(?:\\.\\d+)?(?:(e)[+-]?\\d+)?(f(?:16|32|64|128)?|[iu](?:8|16|32|64|128|word)?)?(?![A-Za-z0-9_+-])(\\s+(?:(?!and|case|catch|else|if|match|or|then)\\b[A-Za-zµΩÅ°'\"]|\\^g|1/)[A-Za-z0-9⁰¹²³⁴⁵⁶⁷⁸⁹⁻⸍µΩÅ°'\"·^*/-]*)?",
                    "name": "constant.numeric.mj",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.mj"
                        },
                        "2": {
                            "name": "punctuation.separator.mj"
                        },
                        "3": {
                            "name": "storage.modifier.mj"
                        }
                    }
                },
                {
                    "match": "(?:\\b|[+-]?)(0x)[0-9A-F]+(?:['_][0-9A-F]+)*(?:\\.[0-9A-F]+)?(?:(p)[+-]\\d+)?(f(?:16|32|64|128)?|[iu](?:8|16|32|64|128|word)?)?(?![A-Za-z0-9_+-])(\\s+(?:(?!and|case|catch|else|if|match|or|then)\\b[A-Za-zµΩÅ°'\"]|\\^g|1/)[A-Za-z0-9⁰¹²³⁴⁵⁶⁷⁸⁹⁻⸍µΩÅ°'\"·^*/-]*)?",
                    "name": "constant.numeric.mj",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.mj"
                        },
                        "2": {
                            "name": "punctuation.separator.mj"
                        },
                        "3": {
                            "name": "punctuation.separator.mj"
                        },
                        "4": {
                            "name": "storage.modifier.mj"
                        }
                    }
                },
                {
                    "match": "(?:\\b|[+-]?)(0o)[0-7]+(?:['_][0-7]+)*(f(?:16|32|64|128)?|[iu](?:8|16|32|64|128|word)?)?(?![A-Za-z0-9_+-])(\\s+(?:(?!and|case|catch|else|if|match|or|then)\\b[A-Za-zµΩÅ°'\"]|\\^g|1/)[A-Za-z0-9⁰¹²³⁴⁵⁶⁷⁸⁹⁻⸍µΩÅ°'\"·^*/-]*)?",
                    "name": "constant.numeric.mj",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.mj"
                        },
                        "2": {
                            "name": "punctuation.separator.mj"
                        },
                        "3": {
                            "name": "storage.modifier.mj"
                        }
                    }
                },
                {
                    "match": "(?:\\b|[+-]?)(0b)[01]+(?:['_][01]+)*(f(?:16|32|64|128)?|[iu](?:8|16|32|64|128|word)?)?(?![A-Za-z0-9_+-])(\\s+(?:(?!and|case|catch|else|if|match|or|then)\\b[A-Za-zµΩÅ°'\"]|\\^g|1/)[A-Za-z0-9⁰¹²³⁴⁵⁶⁷⁸⁹⁻⸍µΩÅ°'\"·^*/-]*)?",
                    "name": "constant.numeric.mj",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.mj"
                        },
                        "2": {
                            "name": "punctuation.separator.mj"
                        },
                        "3": {
                            "name": "storage.modifier.mj"
                        }
                    }
                }
            ]
        },
        "operator": {
            "match": "[+\\-*/%~&^|?:]|=>?|<=>|[<>!]=|(?<=[ {])(?:<+|(?<!^\\s*)>+)",
            "name": "keyword.operator.mj"
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ";",
                    "name": "punctuation.terminator.mj"
                },
                {
                    "match": "[,.]|::",
                    "name": "punctuation.separator.mj"
                },
                {
                    "match": "[()\\[\\]{}]|(?<![ {])<+|(?:(?<![ {])|^\\s*)>+",
                    "name": "punctuation.section.mj"
                }
            ]
        },
        "shell": {
            "begin": "\\$ ",
            "end": "(?=`)|$",
            "name": "punctuation.quoted.mj",
            "patterns": [
                {
                    "match": "(?<=\\$ )[0-9]*[a-z_][a-z0-9_]*",
                    "name": "keyword.operator.mj"
                },
                {
                    "match": "\\(.*\\)",
                    "name": "punctuation.section.mj"
                },
                {
                    "match": "-[A-Za-z]+|--[A-Za-z][A-Za-z0-9]*",
                    "name": "punctuation.terminator.mj"
                },
                {
                    "match": "[,.]|::",
                    "name": "punctuation.separator.mj"
                },
                {
                    "match": "[()\\[\\]{}]|(?<![ {])<+|(?:(?<![ {])|^\\s*)>+",
                    "name": "punctuation.section.mj"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#module"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#type-qualifier"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#type"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#constant"
                },
                {
                    "include": "#function"
                },
                {
                    "include": "#variable"
                }
            ]
        },
        "shell-variable": {
            "match": "(\\$)[0-9_]*[A-Za-z][A-Za-z0-9_]*\\b",
            "name": "variable.other.mj",
            "captures": {
                "1": {
                    "name": "punctuation.quoted.mj"
                }
            }
        },
        "shell-substitution": {
            "begin": "\\$\\(",
            "end": "\\)",
            "name": "punctuation.quoted.mj",
            "patterns": [
                {
                    "match": "(?<=\\$\\()[0-9]*[a-z_][a-z0-9_]*",
                    "name": "keyword.operator.mj"
                },
                {
                    "match": "\\(.*\\)",
                    "name": "punctuation.section.mj"
                },
                {
                    "match": "-[A-Za-z]+|--[A-Za-z][A-Za-z0-9]*",
                    "name": "punctuation.terminator.mj"
                },
                {
                    "match": "[,.]|::",
                    "name": "punctuation.separator.mj"
                },
                {
                    "match": "[()\\[\\]{}]|(?<![ {])<+|(?:(?<![ {])|^\\s*)>+",
                    "name": "punctuation.section.mj"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#module"
                },
                {
                    "include": "#number"
                },
                {
                    "include": "#punctuation"
                },
                {
                    "include": "#type-qualifier"
                },
                {
                    "include": "#operator"
                },
                {
                    "include": "#type"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#constant"
                },
                {
                    "include": "#function"
                },
                {
                    "include": "#variable"
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "begin": "'",
                    "end": "'(?=[^']*$)|$",
                    "name": "string.quoted.single.mj"
                },
                {
                    "begin": "\"",
                    "end": "\"|$",
                    "name": "string.quoted.double.mj",
                    "patterns": [
                        {
                            "begin": "\\\\{",
                            "end": "}",
                            "name": "constant.character.escape.mj",
                            "patterns": [
                                {
                                    "include": "#all"
                                }
                            ]
                        },
                        {
                            "match": "\\\\(?:[\"0nrt\\\\]|x\\h\\h|u\\h\\h\\h\\h)",
                            "name": "constant.character.escape.mj"
                        },
                        {
                            "match": "\\\\(?:x\\h*|u\\h*|.)",
                            "name": "invalid.illegal.mj"
                        }
                    ]
                }
            ]
        },
        "type": {
            "begin": "\\b((?:[iu]|f(?!8))(?:8(?:x(?:16|32|64))?|16(?:x(?:8|16|32))?|32(?:x(?:4|8|16))?|64(?:x[248])?|128|word))\\b(?:(?<!x..?)(<)((?:[A-Za-zµΩÅ°'\"]|\\^g|1/)[A-Za-z0-9⁰¹²³⁴⁵⁶⁷⁸⁹⁻⸍µΩÅ°'\"·^*/-]*)(>))?|(bool\\b|void\\b|[A-Z]\\b|(?:[0-9][0-9+-]*)?[A-Z][A-Z0-9+-]*[a-z][A-Za-z0-9+-]*)",
            "end": "(?!\\)[\\(?]|[\\[\\(<&*?!])",
            "beginCaptures": {
                "1": {
                    "name": "entity.name.type.mj"
                },
                "2": {
                    "name": "punctuation.section.mj"
                },
                "3": {
                    "name": "storage.modifier.mj"
                },
                "4": {
                    "name": "punctuation.section.mj"
                },
                "5": {
                    "name": "entity.name.type.mj"
                },
                "6": {
                    "name": "storage.modifier.mj"
                }
            },
            "patterns": [
                {
                    "match": "\\)",
                    "name": "punctuation.section.mj"
                },
                {
                    "match": "[?!]",
                    "name": "storage.modifier.mj"
                },
                {
                    "match": "[&*]['\"]?(?:\\s*(?:const|mutable|safe|volatile)\\b)*",
                    "name": "storage.modifier.mj"
                },
                {
                    "begin": "\\[",
                    "end": "\\]",
                    "name": "punctuation.section.mj",
                    "patterns": [
                        {
                            "include": "#all"
                        }
                    ]
                },
                {
                    "begin": "\\(",
                    "end": "\\)",
                    "name": "punctuation.section.mj",
                    "patterns": [
                        {
                            "include": "#all"
                        }
                    ]
                },
                {
                    "begin": "<",
                    "end": ">",
                    "name": "punctuation.section.mj",
                    "patterns": [
                        {
                            "include": "#all"
                        }
                    ]
                }
            ]
        },
        "type-qualifier": {
            "match": "\\b(?:const|mutable|safe|volatile)\\b",
            "name": "storage.modifier.mj"
        },
        "unit": {
            "patterns": [
                {
                    "match": "\\b(unit)(?:(<)((?:[A-Za-zµΩÅ°'\"]|\\^g|1/)[A-Za-z0-9⁰¹²³⁴⁵⁶⁷⁸⁹⁻⸍µΩÅ°'\"·^*/-]*)(>))",
                    "captures": {
                        "1": {
                            "name": "keyword.control.mj"
                        },
                        "2": {
                            "name": "punctuation.section.mj"
                        },
                        "3": {
                            "name": "storage.modifier.mj"
                        },
                        "4": {
                            "name": "punctuation.section.mj"
                        }
                    }
                },
                {
                    "match": "\\b(unit)(?:\\s+((?:[A-Za-zµΩÅ°'\"]|\\^g|1/)[A-Za-z0-9⁰¹²³⁴⁵⁶⁷⁸⁹⁻⸍µΩÅ°'\"·^*/-]*))",
                    "captures": {
                        "1": {
                            "name": "keyword.control.mj"
                        },
                        "2": {
                            "name": "storage.modifier.mj"
                        }
                    }
                }
            ]
        },
        "dimension": {
            "match": "\\bdimension(?=<|\\s+[{A-Za-z0-9_])",
            "name": "keyword.control.mj"
        },
        "variable": {
            "match": "\\b[0-9_]*[a-z][a-z0-9_]*\\b",
            "name": "variable.other.mj"
        }
    }
}
