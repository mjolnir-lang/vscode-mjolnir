{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Z80 ASM",
    "comment": "Z80 ASM language syntax",
    "scopeName": "source.asm-z80",
    "fileTypes": [
        "asm-z80"
    ],
    "patterns": [
        {
            "include": "#comment"
        },
        {
            "include": "#namespace"
        },
        {
            "include": "#import"
        },
        {
            "include": "#opcode"
        },
        {
            "include": "#register"
        },
        {
            "include": "#annotation"
        },
        {
            "include": "#type-qualifier"
        },
        {
            "include": "#string"
        },
        {
            "include": "#constant"
        },
        {
            "include": "#punctuation"
        },
        {
            "include": "#keyword"
        },
        {
            "include": "#operator"
        },
        {
            "include": "#type"
        },
        {
            "include": "#number"
        },
        {
            "include": "#label"
        },
        {
            "include": "#variable"
        }
    ],
    "repository": {
        "annotation": {
            "begin": "@",
            "end": "$",
            "name": "punctuation.quoted.asm-z80",
            "patterns": [
                {
                    "match": "\\(.*\\)",
                    "name": "punctuation.section.asm-z80"
                }
            ]
        },
        "comment": {
            "patterns": [
                {
                    "begin": "/// ```",
                    "end": "/// ```",
                    "name": "comment.block.documentation.asm-z80",
                    "patterns": [
                        {
                            "begin": "(?<=^ */// )",
                            "end": "$",
                            "name": "comment.block.documentation.asm-z80",
                            "patterns": [
                                {
                                    "include": "#comment"
                                },
                                {
                                    "include": "#namespace"
                                },
                                {
                                    "include": "#import"
                                },
                                {
                                    "include": "#opcode"
                                },
                                {
                                    "include": "#register"
                                },
                                {
                                    "include": "#annotation"
                                },
                                {
                                    "include": "#type-qualifier"
                                },
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#constant"
                                },
                                {
                                    "include": "#punctuation"
                                },
                                {
                                    "include": "#keyword"
                                },
                                {
                                    "include": "#operator"
                                },
                                {
                                    "include": "#type"
                                },
                                {
                                    "include": "#number"
                                },
                                {
                                    "include": "#label"
                                },
                                {
                                    "include": "#variable"
                                }
                            ]
                        }
                    ]
                },
                {
                    "begin": "///",
                    "end": "$",
                    "name": "comment.block.documentation.asm-z80",
                    "patterns": [
                        {
                            "begin": "`",
                            "end": "`|$",
                            "name": "comment.block.documentation.asm-z80",
                            "patterns": [
                                {
                                    "include": "#namespace"
                                },
                                {
                                    "include": "#import"
                                },
                                {
                                    "include": "#opcode"
                                },
                                {
                                    "include": "#register"
                                },
                                {
                                    "include": "#annotation"
                                },
                                {
                                    "include": "#type-qualifier"
                                },
                                {
                                    "include": "#string"
                                },
                                {
                                    "include": "#constant"
                                },
                                {
                                    "include": "#punctuation"
                                },
                                {
                                    "include": "#keyword"
                                },
                                {
                                    "include": "#operator"
                                },
                                {
                                    "include": "#type"
                                },
                                {
                                    "include": "#number"
                                },
                                {
                                    "include": "#label"
                                },
                                {
                                    "include": "#variable"
                                }
                            ]
                        },
                        {
                            "match": "(?<=/// )(?:BUG|FIXME|NOTE|TODO|XXX):?",
                            "name": "markup.bold.asm-z80"
                        },
                        {
                            "match": "(?<=/// #+ ).*$",
                            "name": "markup.heading.asm-z80"
                        }
                    ]
                },
                {
                    "begin": "//",
                    "end": "$",
                    "name": "comment.line.double-slash.asm-z80",
                    "patterns": [
                        {
                            "match": "(?<=// )(?:BUG|FIXME|NOTE|TODO|XXX):?",
                            "name": "markup.bold.asm-z80"
                        }
                    ]
                }
            ]
        },
        "constant": {
            "match": "\\b(?:false|null|true|[0-9_]*[A-Z][A-Z0-9_]+)\\b",
            "name": "constant.language.asm-z80"
        },
        "label": {
            "patterns": [
                {
                    "match": "^\\b[0-9_]*[a-z][a-z0-9_]*(?=\\s*\\()",
                    "name-other": "entity.name.function.asm-z80",
                    "name": "keyword.operator.asm-z80"
                }
            ]
        },
        "import": {
            "begin": "\\b(import)\\b",
            "end": "$",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.asm-z80"
                }
            },
            "patterns": [
                {
                    "match": "\\b(\\w+)\\b",
                    "name": "punctuation.quoted.asm-z80"
                },
                {
                    "match": ";",
                    "name": "punctuation.terminator.asm-z80"
                },
                {
                    "match": "\\.",
                    "name": "punctuation.separator.asm-z80"
                }
            ]
        },
        "keyword": {
            "patterns": [
                {
                    "match": "(?<=^\\s*|[,<\\]]\\s*)\\b(enum|struct|type|union)\\b",
                    "name": "keyword.control.asm-z80"
                },
                {
                    "match": "(?i)(?<=^\\s+)(ORG|DEFB|EQU)\\b",
                    "name": "keyword.control.asm-z80"
                }
            ]
        },
        "namespace": {
            "match": "\\b[A-Za-z0-9_][A-Za-z0-9_-]+[A-Za-z0-9_](?=::)",
            "name": "entity.name.type.asm-z80",
            "patterns": [
                {
                    "match": ".*",
                    "name": "punctuation.definition.variable.asm-z80"
                }
            ]
        },
        "number": {
            "patterns": [
                {
                    "match": "\\b\\d+(?:\\.\\d+(?:[Ee][+-]?\\d+)?)?([iu](?:8|16|32|64)?|f(?:32|64)?)?\\b",
                    "name": "constant.numeric.asm-z80",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.asm-z80"
                        }
                    }
                },
                {
                    "match": "\\b(0x)[0-9A-Fa-f']*[0-9A-Fa-f](?:\\.\\h+[Pp][+-]\\d+)?([iu](?:8|16|32|64)?|f(?:32|64)?)?\\b",
                    "name": "constant.numeric.asm-z80",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.asm-z80"
                        },
                        "2": {
                            "name": "punctuation.separator.asm-z80"
                        }
                    }
                },
                {
                    "match": "\\b(0o)[0-7']*[0-7]([iu](?:8|16|32|64)?|f(?:32|64)?)?\\b",
                    "name": "constant.numeric.asm-z80",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.asm-z80"
                        },
                        "2": {
                            "name": "punctuation.separator.asm-z80"
                        }
                    }
                },
                {
                    "match": "\\b(0b)[01']*[01]([iu](?:8|16|32|64)?|f(?:32|64)?)?\\b",
                    "name": "constant.numeric.asm-z80",
                    "captures": {
                        "1": {
                            "name": "punctuation.separator.asm-z80"
                        },
                        "2": {
                            "name": "punctuation.separator.asm-z80"
                        }
                    }
                },
                {
                    "match": "\\b0\\S+\\b",
                    "name": "invalid.illegal.asm-z80"
                }
            ]
        },
        "opcode": {
            "patterns": [
                {
                    "match": "(?i)^\\s*(P(USH|OP)|EXX?|LD([DI]R?)?|CP([DI]R?|L)?|A(D[CD]|ND)|INC|DEC|DAA|DI|EI|NEG|CCF|SCF|NOP|HALT|IM|SUB|SBC|XOR|OR|BIT|SET|RES|JP|DJNZ|CALL|RET[IN]?|RST|IN([DI]R?)?|OUT([DI]R?)?)\\b",
                    "name": "keyword.mnemonic.z80.asm-z80"
                }
            ]
        },
        "operator": {
            "match": "[+\\-*/%<>=~&^|?:]|!=\\b",
            "name": "keyword.operator.asm-z80"
        },
        "punctuation": {
            "patterns": [
                {
                    "match": ";",
                    "name": "punctuation.terminator.asm-z80"
                },
                {
                    "match": "[,.]|->|::",
                    "name": "punctuation.separator.asm-z80"
                },
                {
                    "match": "[()\\[\\]{}]",
                    "name": "punctuation.section.asm-z80"
                },
                {
                    "begin": "(?<=\\b(?:enum|type|[0-9_]*[A-Z][A-Za-z0-9]*)\\s*)<",
                    "end": ">",
                    "name": "punctuation.separator.asm-z80",
                    "patterns": [
                        {
                            "include": "#type-qualifier"
                        },
                        {
                            "include": "#type"
                        }
                    ]
                }
            ]
        },
        "register": {
            "match": "\\b(AF?|BC?|C|DE?|E|HL?|I[XY]?|L|PC|R|SP)\\b",
            "name": "variable.language.asm-z80"
        },
        "string": {
            "patterns": [
                {
                    "begin": "'",
                    "end": "'",
                    "name": "string.quoted.single.asm-z80"
                },
                {
                    "begin": "\"",
                    "end": "\"",
                    "name": "string.quoted.double.asm-z80",
                    "patterns": [
                        {
                            "match": "\\\\(?:[\"0nrt\\\\]|x\\h\\h|u\\h\\h\\h\\h)",
                            "name": "constant.character.escape.asm-z80"
                        },
                        {
                            "match": "\\\\(?:x\\h*|u\\h*|.)",
                            "name": "invalid.illegal.asm-z80"
                        }
                    ]
                }
            ]
        },
        "type": {
            "begin": "\\b([iu](?:8|16|32|64)|f(?:32|64)|bool|void|[A-Z](?:[A-Z0-9]*[a-z][A-Za-z0-9-]*)?)\\b",
            "end": "(?!\\s*[\\[<(&*?])",
            "name": "entity.name.type.asm-z80",
            "patterns": [
                {
                    "comment": "A subpattern for matching the derived type qualifier: '?'",
                    "match": "\\?",
                    "name": "storage.modifier.asm-z80"
                },
                {
                    "comment": "A subpattern for matching the left associative derived type qualifiers: '*' and '&'",
                    "match": "[&*](?:\\s*['\"])?(?:\\s*const\\b)?(?:\\s*volatile\\b)?",
                    "name": "storage.modifier.asm-z80"
                },
                {
                    "comment": "The array type derivation",
                    "begin": "\\[",
                    "end": "\\]",
                    "name": "punctuation.section.asm-z80",
                    "patterns": [
                        {
                            "include": "#namespace"
                        },
                        {
                            "include": "#type-qualifier"
                        },
                        {
                            "include": "#string"
                        },
                        {
                            "include": "#constant"
                        },
                        {
                            "include": "#punctuation"
                        },
                        {
                            "include": "#keyword"
                        },
                        {
                            "include": "#operator"
                        },
                        {
                            "include": "#type"
                        },
                        {
                            "include": "#number"
                        },
                        {
                            "include": "#function"
                        },
                        {
                            "include": "#variable"
                        }
                    ]
                }
            ]
        },
        "type-qualifier": {
            "match": "\\b(?:const|mutable|safe|volatile)\\b",
            "name": "storage.modifier.asm-z80"
        },
        "variable": {
            "match": "\\b[0-9]*[a-z_][a-z0-9_]*\\b",
            "name": "variable.other.asm-z80"
        }
    }
}